------------------------
Input File:
------------------------
int fact(int x) {
	// recursive factorial function
	if (x>1)
		return x * fact(x-1);
	else return 1;
}

void main(void) {
/* CS 311 project 2
A lexical analyzer */
	int x, y, z;
	double _funny;
	x = get_integer();
	_funny = get_double();
	if (x>0)
		print_line("result = ", fact(x));
	else if (_funny != 3.14)
	print_line(x*_funny);
}

------------------------
Integer Lexical Analysis:
------------------------
3 28 22 3 28 23 26 
2 22 28 13 29 23 
4 28 9 28 22 28 8 29 23 18 
1 4 29 18 
27 
5 28 22 5 23 26 
3 28 19 28 19 28 18 
0 28 18 
28 17 28 22 23 18 
28 17 28 22 23 18 
2 22 28 13 29 23 
28 22 30 19 28 22 28 23 23 18 
1 2 22 28 16 29 23 
28 22 28 9 28 23 18 
27 

------------------------
String Lexical Analysis:
------------------------
INT id leftparen INT id rightparen leftbrace 
IF leftparen id greater num rightparen 
RETURN id multiplication id leftparen id minus num rightparen semicolon 
ELSE RETURN num semicolon 
rightbrace 
VOID id leftparen VOID rightparen leftbrace 
INT id comma id comma id semicolon 
DOUBLE id semicolon 
id assignop id leftparen rightparen semicolon 
id assignop id leftparen rightparen semicolon 
IF leftparen id greater num rightparen 
id leftparen stringliteral comma id leftparen id rightparen rightparen semicolon 
ELSE IF leftparen id notequal num rightparen 
id leftparen id multiplication id rightparen semicolon 
rightbrace 
